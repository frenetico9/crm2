
import { createClient } from '@supabase/supabase-js'
import type { Agent, Lead, Notification, Property, Visit } from './types'

// By deriving Insert and Update from the Row types, we ensure consistency
// and reduce the complexity that was causing TypeScript errors.
export interface Database {
  public: {
    Tables: {
      agents: {
        Row: Agent
        // id and email are handled by auth triggers/defaults
        Insert: Omit<Agent, 'id' | 'email'>
        Update: Partial<Omit<Agent, 'id' | 'email'>>
      }
      properties: {
        Row: Property
        // id and created_at are generated by the database
        Insert: Omit<Property, 'id' | 'created_at'>
        Update: Partial<Omit<Property, 'id' | 'created_at'>>
      }
      leads: {
        Row: Lead
        // id and created_at are generated by the database
        Insert: Omit<Lead, 'id' | 'created_at'>
        Update: Partial<Omit<Lead, 'id' | 'created_at'>>
      }
      visits: {
        Row: Visit
        // id and created_at are generated by the database
        Insert: Omit<Visit, 'id' | 'created_at'>
        Update: Partial<Omit<Visit, 'id' | 'created_at'>>
      }
      notifications: {
        Row: Notification
        // id and created_at are generated by the database
        Insert: Omit<Notification, 'id' | 'created_at'>
        Update: Partial<Omit<Notification, 'id' | 'created_at'>>
      }
    }
    Views: {
      [_: string]: never
    }
    Functions: {
      [_: string]: never
    }
  }
}

// O CLIENTE NÃO É MAIS CRIADO DIRETAMENTE AQUI.
// EM VEZ DISSO, EXPORTAMOS UMA FUNÇÃO QUE FAZ ISSO DE FORMA ASSÍNCRONA.
export const createSupabaseClient = async () => {
  try {
    const response = await fetch('/api/config');
    if (!response.ok) {
        throw new Error(`Falha ao buscar configuração do servidor: ${response.statusText}`);
    }
    const config = await response.json();

    if (!config.supabaseUrl || !config.supabaseAnonKey) {
      throw new Error("As variáveis de ambiente do Supabase (VITE_SUPABASE_URL e VITE_SUPABASE_ANON_KEY) não foram encontradas no backend. Verifique o painel da Vercel.");
    }
    
    // Agora, com a certeza de ter as chaves, criamos e retornamos o cliente.
    return createClient<Database>(config.supabaseUrl, config.supabaseAnonKey);

  } catch (error) {
    console.error("Erro Crítico: Não foi possível inicializar o Supabase.", error);
    // Retorna null ou lança o erro para que a aplicação possa lidar com isso.
    return null;
  }
};
